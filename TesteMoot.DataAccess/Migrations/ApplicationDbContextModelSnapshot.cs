// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TesteMoot.DataAcess.Data;

#nullable disable

namespace TesteMoon.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.1.23111.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TesteMoot.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "teste@email.com.br",
                            ImageUrl = "",
                            Nome = "Cliente 1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "teste@email.com.br",
                            ImageUrl = "",
                            Nome = "Cliente 2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "teste@email.com.br",
                            ImageUrl = "",
                            Nome = "Cliente 3"
                        });
                });

            modelBuilder.Entity("TesteMoot.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Endereco");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bairro = "Bairro teste 1",
                            Cidade = "São Paulo",
                            ClienteId = 1,
                            Complemento = "Apto 301",
                            Estado = "SP",
                            Logradouro = "Rua teste 1",
                            Numero = 1000,
                            Pais = "Brasil"
                        },
                        new
                        {
                            Id = 2,
                            Bairro = "Bairro teste 2",
                            Cidade = "Belo Horizonte",
                            ClienteId = 1,
                            Complemento = "Apto 401",
                            Estado = "MG",
                            Logradouro = "Rua teste 2",
                            Numero = 1000,
                            Pais = "Brasil"
                        },
                        new
                        {
                            Id = 3,
                            Bairro = "Bairro teste 1",
                            Cidade = "São Paulo",
                            ClienteId = 2,
                            Complemento = "Apto 301",
                            Estado = "SP",
                            Logradouro = "Rua teste 1",
                            Numero = 1000,
                            Pais = "Brasil"
                        });
                });

            modelBuilder.Entity("TesteMoot.Models.Endereco", b =>
                {
                    b.HasOne("TesteMoot.Models.Cliente", "Cliente")
                        .WithMany("Enderecos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("TesteMoot.Models.Cliente", b =>
                {
                    b.Navigation("Enderecos");
                });
#pragma warning restore 612, 618
        }
    }
}
